{"remainingRequest":"/Users/dimitrius/py_features/e-logs-constructor/node_modules/babel-loader/lib/index.js!/Users/dimitrius/py_features/e-logs-constructor/src/store/modules/journal.js","dependencies":[{"path":"/Users/dimitrius/py_features/e-logs-constructor/src/store/modules/journal.js","mtime":1536334153666},{"path":"/Users/dimitrius/py_features/e-logs-constructor/node_modules/cache-loader/dist/cjs.js","mtime":1536335247417},{"path":"/Users/dimitrius/py_features/e-logs-constructor/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/dimitrius/py_features/e-logs-constructor/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\nvar journalState = {\n  namespaced: true,\n  state: {\n    journal: {\n      tables: []\n    }\n  },\n  getters: {\n    getJournalName: function getJournalName(state, getters) {\n      return state.journal.name;\n    },\n    getCellMinValue: function getCellMinValue(state, getters) {\n      return function (tableName, cell) {\n        var table = state.journal.tables.filter(function (item) {\n          return item.latinName === tableName;\n        })[0];\n        var field = table.fields.filter(function (item) {\n          return item.cell === cell;\n        })[0];\n\n        if (field) {\n          return field.min_value;\n        } else {\n          return '';\n        }\n      };\n    },\n    getCellMaxValue: function getCellMaxValue(state, getters) {\n      return function (tableName, cell) {\n        var table = state.journal.tables.filter(function (item) {\n          return item.latinName === tableName;\n        })[0];\n        var field = table.fields.filter(function (item) {\n          return item.cell === cell;\n        })[0];\n\n        if (field) {\n          return field.max_value;\n        } else {\n          return '';\n        }\n      };\n    }\n  },\n  actions: {},\n  mutations: {\n    setJournal: function setJournal(state, payload) {\n      state.journal = _objectSpread({}, state.journal, payload);\n    },\n    addTable: function addTable(state, payload) {\n      state.journal.tables.push(payload);\n    },\n    setTable: function setTable(state, payload) {\n      var table = state.journal.tables.filter(function (item) {\n        return item.latinName === payload.tableName;\n      })[0];\n      table.fields = payload.fields;\n    },\n    setField: function setField(state, payload) {\n      var table = state.journal.tables.filter(function (item) {\n        return item.latinName === payload.name;\n      })[0];\n      var field = table.fields.filter(function (item) {\n        return item.cell === payload.field.cell;\n      })[0];\n\n      if (field) {\n        field.field_name = payload.field.field_name;\n        field.min_value = payload.field.min_value;\n        field.max_value = payload.field.max_value;\n      } else table.fields.push(payload.field);\n    }\n  }\n};\nexport default journalState;",{"version":3,"sources":["/Users/dimitrius/py_features/e-logs-constructor/src/store/modules/journal.js"],"names":["journalState","namespaced","state","journal","tables","getters","getJournalName","name","getCellMinValue","tableName","cell","table","filter","item","latinName","field","fields","min_value","getCellMaxValue","max_value","actions","mutations","setJournal","payload","addTable","push","setTable","setField","field_name"],"mappings":"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","sourcesContent":["const journalState = {\n  namespaced: true,\n  state: {\n    journal: {\n        tables: []\n    }\n  },\n  getters: {\n      getJournalName (state, getters) {\n        return state.journal.name\n      },\n      getCellMinValue (state, getters) {\n        return function (tableName, cell) {\n          let table = state.journal.tables.filter((item) => item.latinName === tableName)[0]\n          let field = table.fields.filter(item => item.cell === cell)[0]\n          if (field) {\n              return field.min_value\n          }\n          else {\n              return ''\n          }\n        }\n      },\n      getCellMaxValue (state, getters) {\n        return function (tableName, cell) {\n          let table = state.journal.tables.filter((item) => item.latinName === tableName)[0]\n          let field = table.fields.filter(item => item.cell === cell)[0]\n          if (field) {\n              return field.max_value\n          }\n          else {\n              return ''\n          }\n        }\n      }\n  },\n  actions: {\n\n  },\n  mutations: {\n    setJournal (state, payload) {\n        state.journal = {...state.journal, ...payload}\n    },\n    addTable (state, payload) {\n        state.journal.tables.push(payload)\n    },\n    setTable (state, payload) {\n        let table = state.journal.tables.filter((item) => item.latinName === payload.tableName)[0]\n        table.fields = payload.fields\n    },\n    setField (state, payload) {\n        let table = state.journal.tables.filter((item) => item.latinName === payload.name)[0]\n        let field = table.fields.filter(item => item.cell === payload.field.cell)[0]\n        if(field) {\n            field.field_name = payload.field.field_name\n            field.min_value = payload.field.min_value\n            field.max_value = payload.field.max_value\n        }\n        else table.fields.push(payload.field)\n\n    }\n  }\n}\n\nexport default journalState"]}]}